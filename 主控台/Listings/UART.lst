C51 COMPILER V9.54   UART                                                                  07/24/2019 11:36:26 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\UART.obj
COMPILER INVOKED BY: C:\KEIL\C51\BIN\C51.EXE UART.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\UART.ls
                    -t) TABS(2) OBJECT(.\Objects\UART.obj)

line level    source

   1          # include "uart.h"
   2          #define  uint8   unsigned char
   3          #define  uint16  unsigned int 
   4          
   5          #define BAUD  19200         // 波特率
   6          #define BAUD3 19200 
   7          #define BAUD4 19200   
   8          
   9          #define S2_S  0x01  
  10          #define S2RI 0x01
  11          #define S2TI 0x02
  12          #define S3RI 0x01
  13          #define S3TI 0x02
  14          #define S4RI 0x01
  15          #define S4TI 0x02
  16          #define Buf_Max 1 //定义数组大小
  17          #define Buf_MaxASR 3
  18          #define Buf_MaxDUO 14
  19          #define Buf_MaxTS 4
  20          uint8 xdata Rec_Buf1[Buf_MaxTS];         //调试舵机接收数据
  21          //uint8 xdata Rec_Buf2[Buf_MaxASR];        //语音识别模块接收缓存
  22          //uint8 xdata Rec_Buf3[Buf_MaxDUO];        //接收串口3缓存数组
  23          //uint8 xdata Rec_Buf4[Buf_Max];           //接收串口4缓存数组
  24          uint8 i = 0;      
  25          uint8 j = 0; 
  26          uint8 m = 0;      
  27          uint8 n = 0;
  28          //==================================================================================
  29          //设置IO口--------------------------------------------------------------------------
  30          void wagh()
  31          {
  32   1        P0M1 = 0; P0M0 = 0; //设置P0.0~P0.7为准双向口
  33   1        P1M1 = 0; P1M0 = 0; //设置P1.0~P1.7为准双向口
  34   1        P2M1 = 0; P2M0 = 0; //设置P2.0~P2.7为准双向口 
  35   1        P3M1 = 0; P3M0 = 0; //设置P3.0~P3.7为准双向口
  36   1        P4M1 = 0; P4M0 = 0; //设置P4.0~P4.7为准双向口
  37   1        P5M1 = 0; P5M0 = 0; //设置P5.0~P5.7为准双向口
  38   1      }
  39          //延时函数---------------------------------------------------------------------------
  40          void delay_ms(unsigned long int x) 
  41          {  
  42   1        unsigned int j,i;   
  43   1        for(j=0;j<x;j++)   
  44   1        {    
  45   2          for(i=0;i<1100;i++);   
  46   2        }  
  47   1      }
  48          //串口1初始化函数--------------------------------------------------------------------
  49          void Uart1234_Init(void)
  50          { 
  51   1        P_SW1|=0X00;        //选择P16 P17为串口1
  52   1        P_SW1&=0XFF;        //选择P16 P17为串口1
  53   1        P_SW2|=S2_S;        //选择P46 P47为串口2
  54   1        //串口1配置 
C51 COMPILER V9.54   UART                                                                  07/24/2019 11:36:26 PAGE 2   

  55   1        PCON &= 0x3f;       //（0011 1111）串口1波特率不倍速
  56   1        SCON = 0x50;        //（0101 0000）串口1的8位数据,可变波特率，启动串行接收器（工作方式一）
  57   1        AUXR |= 0x01;       //（0000 0000）串口1选择定时器2为波特率发生器
  58   1        //串口2配置 
  59   1        S2CON = 0x50;       //串口2的8位数据,可变波特率 
  60   1        //串口3配置 
  61   1        S3CON |= 0x50;      //串口3启动串行接收器
  62   1        S3CON &= 0x70;      //串口3选择定时器2为波特率发生器，8位数据,可变波特率
  63   1        //串口4配置 
  64   1        S4CON |= 0x10;      //（0001 0000）启动串行接收器 
  65   1        S4CON &= 0x30;      //（0011 0000）8位数据,可变波特率，串口4选择定时器2为波特率发生器
  66   1        S4CON |= 0x40;    //串口4选择定时器4为波特率发生器
  67   1        
  68   1        AUXR |= 0x04;       //定时器2时钟为Fosc,即1T  
  69   1        T2L=(65536-(MAIN_Fosc/4/BAUD));
  70   1        T2H=(65536-(MAIN_Fosc/4/BAUD))>>8;        //设定定时初值
  71   1        AUXR |= 0x10;       //启动定时器2
  72   1        
  73   1        T4T3M |= 0x22;    //定时器3时钟为Fosc,即1T/定时器4时钟为Fosc,即1T
  74   1        T3L=(65536-(MAIN_Fosc/4/BAUD3));
  75   1        T3H=(65536-(MAIN_Fosc/4/BAUD3))>>8;
  76   1        T4L=(65536-(MAIN_Fosc/4/BAUD4));
  77   1        T4H=(65536-(MAIN_Fosc/4/BAUD4))>>8;
  78   1        T4T3M |= 0x88;    //启动定时器3和4
  79   1      }
  80          //========================================================================================================
             -===
  81          //串口1发送字符函数
  82          void SendDataByUart1(uint8 dat)
  83          {
  84   1          SBUF = dat;                 //写数据到UART数据寄存器
  85   1          while(TI == 0);             //在停止位没有发送时，TI为0即一直等待
  86   1          TI = 0;                     //清除TI位（该位必须软件清零）
  87   1      }
  88          
  89          //串口1发送字符串函数
  90          
  91          void SendStringByUart1(uint8 *s)
  92          {
  93   1        while(*s)
  94   1        {
  95   2          SendDataByUart1(*s++);       //将字符串中的字符一个一个发送
  96   2        }
  97   1      }
  98          
  99          //清除串口1缓存内容函数
 100          void CLR_Buf1(void)
 101          {
 102   1          uint8 k;
 103   1          for(k=0;k<Buf_MaxTS;k++)      //将串口1缓存数组的值都清为零
 104   1            {
 105   2               Rec_Buf1[k] = 0;
 106   2            }
 107   1          i = 0;                    
 108   1      }
 109          
 110          void Uart1() interrupt UART1_VECTOR using 1
 111          {
 112   1        ES = 0;                       // 串口1中断关闭
 113   1        if (RI)                       //串行接收到停止位的中间时刻时，该位置1
 114   1        {
 115   2            RI = 0;                   //清除RI位 （该位必须软件清零）
C51 COMPILER V9.54   UART                                                                  07/24/2019 11:36:26 PAGE 3   

 116   2            Rec_Buf1[i] = SBUF;       //把串口1缓存SBUF寄存器数据依次存放到数组Rec_Buf1中
 117   2            i++;                      
 118   2            if(i>=Buf_MaxTS)             //接收数大于定义接收数组最大个数时，覆盖接收数组之前值
 119   2              {
 120   3                i = 0;                 
 121   3              }           
 122   2         }
 123   1         if (TI)                    //在停止位开始发送时，该位置1
 124   1         {
 125   2            TI = 0;                 //清除TI位（该位必须软件清零）
 126   2         }
 127   1         ES =  1;                   // 串口1中断打开
 128   1      }
 129          ////======================================================================================================
             -=====
 130          ////串口2发送字符函数
 131          //void SendDataByUart2(uint8 dat)
 132          //{
 133          //    S2BUF = dat;                 //写数据到UART数据寄存器
 134          //    while(!(S2CON&S2TI));        //在停止位没有发送时，S2TI为0即一直等待
 135          //    S2CON&=~S2TI;                //清除S2CON寄存器对应S2TI位（该位必须软件清零）
 136          //}
 137          //// 串口2发送字符串函数
 138          //void SendStringByUart2(uint8 *s)
 139          //{
 140          //  IE2 &= 0xFE;                // 串口2中断关闭
 141          //  while (*s)                  //检测字符串结束标志
 142          //  {
 143          //    SendDataByUart2(*s++);         //发送当前字符
 144          //  }
 145          //  IE2 |= 0x01;                     // 串口2中断打开
 146          //}
 147          ////清除串口1缓存内容函数
 148          //void CLR_Buf2(void)
 149          //{
 150          //  unsigned char k;
 151          //  for(k=0;k<Buf_MaxASR;k++)      //将串口2缓存数组的值都清为零
 152          //  {
 153          //     Rec_Buf2[k] = 0;
 154          //  }
 155          //  j = 0;                    
 156          //}
 157          //void Uart2() interrupt UART2_VECTOR using 1
 158          //{
 159          //  IE2 &= 0xFE;                               // 串口2中断关闭
 160          //  if (S2CON & S2RI)                          //串行接收到停止位的中间时刻时，该位置1
 161          //  {
 162          //      S2CON &= ~S2RI;                        //清除S2CON寄存器对应S2RI位（该位必须软件清零）
 163          //      Rec_Buf2[j] = S2BUF;                   //把串口2缓存SBUF寄存器数据依次存放到数组Rec_Buf2中           
             -                       
 164          //      j++;
 165          //    if(j>Buf_MaxASR)                          //接收数大于定义接收数组最大个数时，覆盖接收数组之前值
 166          //      {
 167          //          j = 0;
 168          //      }   
 169          //   }
 170          //      if (S2CON & S2TI)                       //在停止位开始发送时，该位置1
 171          //      {
 172          //        S2CON &= ~S2TI;                       //清除S2CON寄存器对应S2TI位（该位必须软件清零）
 173          //      }
 174          //   IE2 |= 0x01;                               // 串口2中断打开  
 175          //}
C51 COMPILER V9.54   UART                                                                  07/24/2019 11:36:26 PAGE 4   

 176          ////====================================================================================================
 177          ////串口3发送数据函数
 178          //void SendDataByUart3(uint8 dat)
 179          //{
 180          //    S3BUF = dat;                 //写数据到UART数据寄存器
 181          //    while(!(S3CON&S3TI));        //在停止位没有发送时，S3TI为0即一直等待
 182          //    S3CON&=~S3TI;                //清除S3CON寄存器对应S3TI位（该位必须软件清零）
 183          //}
 184          
 185          //// 串口3发送字符串函数
 186          //void SendStringByUart3(uint8 *s)
 187          //{
 188          //    IE2 &= 0xF7;                     // 串口3中断关闭
 189          //    while (*s)                       //检测字符串结束标志
 190          //    {
 191          //      SendDataByUart3(*s++);         //发送当前字符
 192          //    }
 193          //    IE2 |= 0x08;                     // 串口3中断打开
 194          //}
 195          ////清除缓存内容函数
 196          //void CLR_Buf3(void)
 197          //{
 198          //    uint8 k;
 199          //    for(k=0;k<Buf_MaxDUO;k++)      //将串口3缓存数组的值都清为零
 200          //    {
 201          //         Rec_Buf3[k] = 0;
 202          //    }
 203          //    m = 0;                    
 204          //}
 205          
 206          //void Uart3() interrupt UART3_VECTOR using 1
 207          //{
 208          //  IE2 &= 0xF7;                     // 串口3中断关闭
 209          //  if (S3CON & S3RI)                //串行接收到停止位的中间时刻时，该位置1
 210          //  {
 211          //      S3CON &= ~S3RI;              //清除S3CON寄存器对应S3RI位（该位必须软件清零）
 212          //      Rec_Buf3[m] = S3BUF;         //把串口3缓存SBUF寄存器数据依次存放到数组Rec_Buf3中
 213          //      m++;               
 214          //      if(m>Buf_MaxDUO)                //接收数大于定义接收数组最大个数时，覆盖接收数组之前值
 215          //        {
 216          //          m = 0;
 217          //        }     
 218          //   }
 219          //  if (S3CON & S3TI)                //在停止位开始发送时，该位置1
 220          //   {
 221          //      S3CON &= ~S3TI;              //清除S3CON寄存器对应S3TI位（该位必须软件清零）
 222          //   }
 223          //   IE2 |= 0x08;                     // 串口3中断打开
 224          //}
 225          ////======================================================================================================
             -==
 226          ////串口4发送数据函数
 227          //void SendDataByUart4(uint8 dat)
 228          //{
 229          //    S4BUF = dat;                 //写数据到UART数据寄存器
 230          //    while(!(S4CON&S4TI));        //在停止位没有发送时，S4TI为0即一直等待
 231          //    S4CON&=~S4TI;                //清除S4CON寄存器对应S4TI位（该位必须软件清零）
 232          //}
 233          ////串口4发送字符串函数
 234          //void SendStringByUart4(char *s)
 235          //{
 236          //  IE2 &= 0xEF;                     //串口4中断关闭
C51 COMPILER V9.54   UART                                                                  07/24/2019 11:36:26 PAGE 5   

 237          //  while (*s)                       //检测字符串结束标志
 238          //  {
 239          //    SendDataByUart4(*s++);         //发送当前字符
 240          //  }
 241          //  IE2 |= 0x10;                     //串口4中断打开
 242          //}
 243          //void CLR_Buf4(void)
 244          //{
 245          //  unsigned char k;
 246          //  for(k=0;k<Buf_Max;k++)         //将串口4缓存数组的值都清为零
 247          //  {
 248          //     Rec_Buf4[k] = 0;
 249          //  }
 250          //  n = 0;                    
 251          //}
 252          
 253          ////串口4中断服务函数
 254          //void Uart4() interrupt UART4_VECTOR
 255          //{     
 256          //  IE2 &= 0xEF;                // 串口4中断关闭  
 257          //  if(S4CON & S4RI)           //串行接收到停止位的中间时刻时，该位置1
 258          //  {
 259          //    S4CON &= ~S4RI;          //清除S4CON寄存器对应S4RI位（该位必须软件清零）
 260          //    Rec_Buf4[n] = S4BUF;     //把串口4缓存SBUF寄存器数据依次存放到数组Rec_Buf4中
 261          //    n++;               
 262          //    if(n>Buf_Max)            //接收数大于定义接收数组最大个数时，覆盖接收数组之前值
 263          //    {
 264          //        n = 0;
 265          //    }
 266          //  }
 267          //  if(S4CON & S4TI)           //在停止位开始发送时，该位置1
 268          //  {
 269          //    S4CON &= ~S4TI;          //清除S4CON寄存器对应S4TI位（该位必须软件清零）
 270          //  }
 271          //   IE2 |= 0x10;              // 串口4中断打开
 272          //}
 273          //=========================================================================================


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    253    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
